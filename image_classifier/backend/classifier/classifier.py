# image_classifier/classifier.py
import torch
import torch.nn as nn
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image
import os

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã
CLASS_NAMES = ['graffiti', 'no_repair', 'scheduled_repair', 'urgent_repair']

# –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# –ü—É—Ç–∏
BASE_DIR = os.path.dirname(__file__)
BEST_MODEL_PATH = os.path.join(BASE_DIR, "model", "best_model.pth")
BEST_ACCURACY_PATH = os.path.join(BASE_DIR, "model", "best_val_accuracy.txt")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
model = models.resnet18()
model.fc = nn.Linear(model.fc.in_features, len(CLASS_NAMES))
model.to(device)
model.eval()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
if os.path.exists(BEST_MODEL_PATH) and os.path.exists(BEST_ACCURACY_PATH):
    model.load_state_dict(torch.load(BEST_MODEL_PATH, map_location=device))
    with open(BEST_ACCURACY_PATH, 'r') as f:
        best_val_accuracy = float(f.read())
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {best_val_accuracy:.4f}")
else:
    best_val_accuracy = 0.0
    print("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å = 0.0")

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def preprocess_image(image):
    transform = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    return transform(image).unsqueeze(0).to(device)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def predict_image(image_file):
    if not isinstance(image_file, Image.Image):
        image = Image.open(image_file).convert("RGB")
    else:
        image = image_file.convert("RGB")

    image_tensor = preprocess_image(image)

    with torch.no_grad():
        output = model(image_tensor)
        probabilities = torch.nn.functional.softmax(output[0], dim=0).cpu()

    top_prob, top_class = torch.topk(probabilities, 1)
    return CLASS_NAMES[top_class.item()], top_prob.item()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è
def maybe_update_model():
    global best_val_accuracy
    if os.path.exists(os.path.join(BASE_DIR, "model", "last_val_accuracy.txt")):
        with open(os.path.join(BASE_DIR, "model", "last_val_accuracy.txt"), 'r') as f:
            new_accuracy = float(f.read())

        if new_accuracy > best_val_accuracy:
            print(f"üöÄ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –ª—É—á—à–µ! ({new_accuracy:.4f} > {best_val_accuracy:.4f})")
            model.load_state_dict(torch.load(BEST_MODEL_PATH, map_location=device))
            best_val_accuracy = new_accuracy
            with open(BEST_ACCURACY_PATH, 'w') as f:
                f.write(str(best_val_accuracy))
            print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            print(f"üîí –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Ö—É–∂–µ ({new_accuracy:.4f} <= {best_val_accuracy:.4f}), –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        print("‚ùå last_val_accuracy.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.")
